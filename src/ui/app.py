
import streamlit as st
from pathlib import Path
import os
from dotenv import load_dotenv

from src.domain.models import Session
from src.domain.services import TestService, EvaluationService
from src.data.case_loader import CaseLoader
from src.data.test_templates import TestTemplates
from src.ai.llm_provider import LLMClient

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ü–∞—Ü–∏–µ–Ω—Ç",
    page_icon="üè•",
    layout="wide"
)


@st.cache_resource
def init_services():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ–¥–∏–Ω —Ä–∞–∑.
    
    Returns:
        dict —Å –∫–ª—é—á–∞–º–∏:
        - "llm": LLMClient
        - "cases": Dict[str, ClinicalCase] 
        - "test_service": TestService
        - "evaluation_service": EvaluationService
    """
    # 1. –°–æ–∑–¥–∞—Ç—å LLM –∫–ª–∏–µ–Ω—Ç –∏–∑ .env
    llm = LLMClient.from_env()
    
    # 2. –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Å–ª—É—á–∞–∏
    case_loader = CaseLoader(cases_dir=Path("data/cases"))
    cases = case_loader.load_all()
    
    # 3. –°–æ–∑–¥–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã
    test_service = TestService()
    evaluation_service = EvaluationService(llm_client=llm)
    
    return {
        "llm": llm,
        "cases": cases,
        "test_service": test_service,
        "evaluation_service": evaluation_service
    }


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
try:
    services = init_services()
except ValueError as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    st.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –∏ —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ API –∫–ª—é—á —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    st.stop()
except Exception as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
    st.stop()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
if 'session' not in st.session_state:
    st.session_state.session = None  # –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è (Session –æ–±—ä–µ–∫—Ç)
    st.session_state.active_tab = "cases"  # cases, interview, tests, diagnosis


def start_new_session(case_id: str):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–ª—É—á–∞–µ–º"""
    case = services["cases"][case_id]
    st.session_state.session = Session(case=case)
    st.session_state.active_tab = "interview"


def add_to_conversation(role: str, content: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
    st.session_state.session.conversation.append({
        "role": role,
        "content": content
    })


with st.sidebar:
    st.title("üè• –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ü–∞—Ü–∏–µ–Ω—Ç")
    
    if st.session_state.session is None:
        # –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        st.info("üëà –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–π —Å–ª—É—á–∞–π")
    
    else:
        # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ
        case = st.session_state.session.case
        
        st.success(f"**–ü–∞—Ü–∏–µ–Ω—Ç:** {case.patient.name}")
        st.write(f"**–í–æ–∑—Ä–∞—Å—Ç:** {case.patient.age} –ª–µ—Ç")
        st.write(f"**–ü–æ–ª:** {'–ú—É–∂—Å–∫–æ–π' if case.patient.gender == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'}")
        
        st.write("---")
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–∫–ª–∞–¥–∫–∞–º
        st.subheader("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
        
        # –ö–Ω–æ–ø–∫–∞ "–û–ø—Ä–æ—Å"
        if st.button(
            "üí¨ –û–ø—Ä–æ—Å –ø–∞—Ü–∏–µ–Ω—Ç–∞", 
            key="nav_interview",
            use_container_width=True,
            type="primary" if st.session_state.active_tab == "interview" else "secondary"
        ):
            st.session_state.active_tab = "interview"
            st.rerun()
        
        # –ö–Ω–æ–ø–∫–∞ "–ê–Ω–∞–ª–∏–∑—ã"
        if st.button(
            "üß™ –ê–Ω–∞–ª–∏–∑—ã", 
            key="nav_tests",
            use_container_width=True,
            type="primary" if st.session_state.active_tab == "tests" else "secondary"
        ):
            st.session_state.active_tab = "tests"
            st.rerun()
        
        # –ö–Ω–æ–ø–∫–∞ "–î–∏–∞–≥–Ω–æ–∑"
        if st.button(
            "üìã –î–∏–∞–≥–Ω–æ–∑ –∏ –ª–µ—á–µ–Ω–∏–µ", 
            key="nav_diagnosis",
            use_container_width=True,
            type="primary" if st.session_state.active_tab == "diagnosis" else "secondary"
        ):
            st.session_state.active_tab = "diagnosis"
            st.rerun()
        
        st.write("---")
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–æ–≤—ã–π —Å–ª—É—á–∞–π"
        if st.button("üîÑ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Å–ª—É—á–∞–π", use_container_width=True):
            st.session_state.session = None
            st.session_state.active_tab = "cases"
            st.rerun()


# === –û–°–ù–û–í–ù–û–ô –ö–û–ù–¢–ï–ù–¢ ===

if st.session_state.session is None:
    # –≠–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞—è
    st.header("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–π —Å–ª—É—á–∞–π")
    st.write("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
    
    st.write("---")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª—É—á–∞–∏
    cases = services["cases"]
    
    # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    cols = st.columns(2)
    
    for idx, (case_id, case) in enumerate(cases.items()):
        with cols[idx % 2]:
            with st.container(border=True):
                st.subheader(case.title)
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ
                col1, col2 = st.columns(2)
                with col1:
                    st.write(f"**–ü–∞—Ü–∏–µ–Ω—Ç:** {case.patient.name}")
                    st.write(f"**–í–æ–∑—Ä–∞—Å—Ç:** {case.patient.age} –ª–µ—Ç")
                with col2:
                    st.write(f"**–ü–æ–ª:** {'–ú' if case.patient.gender == 'male' else '–ñ'}")
                    if case.patient.occupation:
                        st.write(f"**–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:** {case.patient.occupation}")
                
                # –ñ–∞–ª–æ–±–∞
                st.write(f"**–ñ–∞–ª–æ–±–∞:** {case.chief_complaint}")
                
                # –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞—Ç—å (–≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –¥–≤—É–º –∫–æ–ª–æ–Ω–∫–∞–º)
                btn_col1, btn_col2 = st.columns([1,1])
                with btn_col1:
                    if st.button(
                        "‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é", 
                        key=f"start_{case_id}",
                        use_container_width=True,
                        type="primary"
                    ):
                        start_new_session(case_id)
                        st.rerun()

elif st.session_state.active_tab == "interview":
    st.header("üí¨ –û–ø—Ä–æ—Å –ø–∞—Ü–∏–µ–Ω—Ç–∞")
    
    session = st.session_state.session
    case = session.case
    
    # –ú–µ—Ç—Ä–∏–∫–∏ —Å–≤–µ—Ä—Ö—É
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("–ü–∞—Ü–∏–µ–Ω—Ç", case.patient.name)
    with col2:
        st.metric("–í–æ–∑—Ä–∞—Å—Ç", f"{case.patient.age} –ª–µ—Ç")
    with col3:
        st.metric("–ü–æ–ª", "–ú" if case.patient.gender == "male" else "–ñ")
    with col4:
        st.metric("–ñ–∞–ª–æ–±–∞", case.chief_complaint)
    
    st.write("---")
    
    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —á–∞—Ç–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π
    chat_container = st.container(height=400)
    
    with chat_container:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        for msg in session.conversation:
            if msg['role'] == 'doctor':
                st.chat_message("user", avatar="üë®‚Äç‚öïÔ∏è").write(msg['content'])
            else:
                st.chat_message("assistant", avatar="ü§í").write(msg['content'])
    
    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞ (–≤–Ω–∏–∑—É, –≤–Ω–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)
    question = st.chat_input("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–∞—Ü–∏–µ–Ω—Ç—É...")
    
    if question:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤—Ä–∞—á–∞
        add_to_conversation("doctor", question)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –ø–æ–∫–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç
        with st.spinner("–ü–∞—Ü–∏–µ–Ω—Ç –¥—É–º–∞–µ—Ç..."):
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞
            patient_context = {
                "name": case.patient.name,
                "age": case.patient.age,
                "gender": case.patient.gender,
                "chief_complaint": case.chief_complaint,
                "history": case.history,
                "symptoms": case.symptoms
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM
            response = services["llm"].get_patient_response(
                question=question,
                patient_context=patient_context,
                conversation_history=session.conversation
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞
        add_to_conversation("patient", response)
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        st.rerun()
    
    st.write("---")
    
    # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –∏ –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞
    col1, col2 = st.columns([3, 1])
    with col1:
        st.info("üí° –°–æ–±–µ—Ä–∏—Ç–µ –∞–Ω–∞–º–Ω–µ–∑, –∑–∞–¥–∞–π—Ç–µ –≤–∞–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–∏–º–ø—Ç–æ–º–∞—Ö")
    with col2:
        if st.button("–î–∞–ª–µ–µ: –ê–Ω–∞–ª–∏–∑—ã ‚Üí", use_container_width=True, type="primary"):
            st.session_state.active_tab = "tests"
            st.rerun()

elif st.session_state.active_tab == "tests":
    st.header("üß™ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π")
    
    session = st.session_state.session
    case = session.case
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    available_tests = TestTemplates.get_all_tests()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    lab_tests = [t for t in available_tests if t["category"] == "laboratory"]
    exam_tests = [t for t in available_tests if t["category"] == "examination"]
    imaging_tests = [t for t in available_tests if t["category"] == "imaging"]
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –ø–æ –æ–¥–Ω–æ–º—É")
        
        # –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã
        with st.expander("üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã", expanded=True):
            lab_options = {t["name"]: t["test_id"] for t in lab_tests if t["test_id"] not in session.ordered_tests}
            selected_lab_name = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∞–ª–∏–∑",
                options=["‚Äî –Ω–µ –≤—ã–±—Ä–∞–Ω–æ ‚Äî"] + list(lab_options.keys()),
                key="select_lab_test",
            )
            if st.button("–ü—Ä–æ–≤–µ—Å—Ç–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑", key="run_lab_test", disabled=selected_lab_name == "‚Äî –Ω–µ –≤—ã–±—Ä–∞–Ω–æ ‚Äî"):
                test_id = lab_options[selected_lab_name]
                with st.spinner("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤..."):
                    result = services["test_service"].get_test_results(test_id=test_id, case=case)
                    session.test_results[test_id] = result
                    if test_id not in session.ordered_tests:
                        session.ordered_tests.append(test_id)
                st.success(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã: {result.name}")
                st.rerun()
        
        # –û—Å–º–æ—Ç—Ä –∏ –ø–∞–ª—å–ø–∞—Ü–∏—è
        with st.expander("ü©∫ –û—Å–º–æ—Ç—Ä –∏ –ø–∞–ª—å–ø–∞—Ü–∏—è", expanded=True):
            exam_options = {t["name"]: t["test_id"] for t in exam_tests if t["test_id"] not in session.ordered_tests}
            selected_exam_name = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–º–æ—Ç—Ä",
                options=["‚Äî –Ω–µ –≤—ã–±—Ä–∞–Ω–æ ‚Äî"] + list(exam_options.keys()),
                key="select_exam_test",
            )
            if st.button("–ü—Ä–æ–≤–µ—Å—Ç–∏ –æ—Å–º–æ—Ç—Ä", key="run_exam_test", disabled=selected_exam_name == "‚Äî –Ω–µ –≤—ã–±—Ä–∞–Ω–æ ‚Äî"):
                test_id = exam_options[selected_exam_name]
                with st.spinner("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤..."):
                    result = services["test_service"].get_test_results(test_id=test_id, case=case)
                    session.test_results[test_id] = result
                    if test_id not in session.ordered_tests:
                        session.ordered_tests.append(test_id)
                st.success(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã: {result.name}")
                st.rerun()
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        with st.expander("üì∑ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", expanded=True):
            imaging_options = {t["name"]: t["test_id"] for t in imaging_tests if t["test_id"] not in session.ordered_tests}
            selected_img_name = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ",
                options=["‚Äî –Ω–µ –≤—ã–±—Ä–∞–Ω–æ ‚Äî"] + list(imaging_options.keys()),
                key="select_imaging_test",
            )
            if st.button("–ü—Ä–æ–≤–µ—Å—Ç–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é", key="run_imaging_test", disabled=selected_img_name == "‚Äî –Ω–µ –≤—ã–±—Ä–∞–Ω–æ ‚Äî"):
                test_id = imaging_options[selected_img_name]
                with st.spinner("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤..."):
                    result = services["test_service"].get_test_results(test_id=test_id, case=case)
                    session.test_results[test_id] = result
                    if test_id not in session.ordered_tests:
                        session.ordered_tests.append(test_id)
                st.success(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã: {result.name}")
                st.rerun()
    
    with col2:
        # –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        st.subheader("–°—Ç–∞—Ç—É—Å")
        st.metric("–ü—Ä–æ–≤–µ–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤", len(session.ordered_tests))
        st.metric("–ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", len(session.test_results))
        
        if session.test_results:
            st.write("---")
            st.write("**–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**")
            for test_id, result in session.test_results.items():
                st.write(f"‚úì {result.name}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if session.test_results:
        st.write("---")
        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π")
        
        for test_id, result in session.test_results.items():
            with st.expander(f"üìÑ {result.name}", expanded=False):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if "description" in result.results:
                    # –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–æ—Å–º–æ—Ç—Ä, –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è)
                    st.write(result.results["description"])
                else:
                    # –ß–∏—Å–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ)
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
                    table_data = []
                    for param_id, param_data in result.results.items():
                        row = {
                            "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": param_data["name"],
                            "–ó–Ω–∞—á–µ–Ω–∏–µ": f"{param_data['value']} {param_data['unit']}",
                        }
                        if "reference" in param_data:
                            row["–ù–æ—Ä–º–∞"] = param_data["reference"]
                            row["–°—Ç–∞—Ç—É—Å"] = "‚úÖ –ù–æ—Ä–º–∞" if param_data["status"] == "normal" else "‚ö†Ô∏è –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ"
                        table_data.append(row)
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                    st.dataframe(
                        table_data, 
                        use_container_width=True, 
                        hide_index=True
                    )
    
    st.write("---")
    
    # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –∏ –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞
    col1, col2 = st.columns([3, 1])
    with col1:
        st.info("üí° –ü—Ä–æ–≤–æ–¥–∏—Ç–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    with col2:
        if st.button("–î–∞–ª–µ–µ: –î–∏–∞–≥–Ω–æ–∑ ‚Üí", use_container_width=True, type="primary"):
            st.session_state.active_tab = "diagnosis"
            st.rerun()

elif st.session_state.active_tab == "diagnosis":
    st.header("üìã –î–∏–∞–≥–Ω–æ–∑ –∏ –ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è")
    
    session = st.session_state.session
    case = session.case
    
    # –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞: –æ–ø—Ä–æ—Å –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã
    with st.expander("üßæ –°–≤–æ–¥–∫–∞ –æ–ø—Ä–æ—Å–∞ –∏ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π", expanded=False):
        st.subheader("–û–ø—Ä–æ—Å (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è)")
        if session.conversation:
            for msg in session.conversation[-6:]:
                role_icon = "üë®‚Äç‚öïÔ∏è" if msg.get('role') == 'doctor' else "ü§í"
                st.write(f"{role_icon} {msg.get('content','')}")
        else:
            st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–∞")
        
        st.subheader("–ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
        if session.test_results:
            for tid, res in session.test_results.items():
                st.write(f"‚Ä¢ {res.name}")
        else:
            st.write("–ü–æ–∫–∞ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–æ—Å—å")
    
    # –ï—Å–ª–∏ –æ—Ü–µ–Ω–∫–∞ —É–∂–µ –µ—Å—Ç—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if session.evaluation is not None:
        # === –≠–ö–†–ê–ù –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===
        st.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏")
        
        # –û–±—â–∏–µ –±–∞–ª–ª—ã
        total_score = session.evaluation["total_score"]
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric(
                "–î–∏–∞–≥–Ω–æ–∑",
                f"{session.evaluation['diagnosis']['score']}/100"
            )
        
        with col2:
            st.metric(
                "–õ–µ—á–µ–Ω–∏–µ",
                f"{session.evaluation['treatment']['score']}/100"
            )
        
        with col3:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ –±–∞–ª–ª–∞–º
            if total_score >= 80:
                color_icon = "üü¢"
            elif total_score >= 60:
                color_icon = "üü°"
            else:
                color_icon = "üî¥"
            
            st.metric(
                "–ò—Ç–æ–≥–æ",
                f"{color_icon} {total_score}/100"
            )
        
        st.write("---")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –≤ –¥–≤—É—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üîç –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ –¥–∏–∞–≥–Ω–æ–∑—É")
            
            # –ò–∫–æ–Ω–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É
            status_icons = {
                "correct": "‚úÖ",
                "partial": "‚ö†Ô∏è",
                "incorrect": "‚ùå"
            }
            status_icon = status_icons.get(
                session.evaluation['diagnosis']['status'], 
                "‚ùì"
            )
            
            st.write(f"{status_icon} {session.evaluation['diagnosis']['feedback']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            with st.expander("üìö –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑"):
                st.write(f"**–î–∏–∞–≥–Ω–æ–∑:** {case.correct_diagnosis}")
                st.write(f"**–ú–ö–ë-10:** {case.correct_icd10}")
        
        with col2:
            st.subheader("üíä –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ –ª–µ—á–µ–Ω–∏—é")
            
            st.write(session.evaluation['treatment']['feedback'])
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            with st.expander("üìö –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ª–µ—á–µ–Ω–∏–µ"):
                st.write("**–ú–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã:**")
                for med in case.correct_treatment.get("medications", []):
                    st.write(f"- {med['name']} {med['dose']} {med['route']} {med['frequency']}")
                
                st.write("\n**–ü—Ä–æ—Ü–µ–¥—É—Ä—ã:**")
                for proc in case.correct_treatment.get("procedures", []):
                    st.write(f"- {proc}")
        
        st.write("---")
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", use_container_width=True):
                session.submitted_diagnosis = None
                session.submitted_treatment = None
                session.evaluation = None
                st.rerun()
        
        with col2:
            if st.button("üè† –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ª—É—á–∞–π", use_container_width=True):
                st.session_state.session = None
                st.session_state.active_tab = "cases"
                st.rerun()
    
    else:
        # === –≠–ö–†–ê–ù –í–í–û–î–ê –î–ò–ê–ì–ù–û–ó–ê –ò –õ–ï–ß–ï–ù–ò–Ø ===
        
        # –î–≤–µ –∫–æ–ª–æ–Ω–∫–∏: –¥–∏–∞–≥–Ω–æ–∑ —Å–ª–µ–≤–∞, –ª–µ—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üîç –î–∏–∞–≥–Ω–æ–∑")
            
            diagnosis_input = st.text_input(
                "–ü–æ—Å—Ç–∞–≤—å—Ç–µ –¥–∏–∞–≥–Ω–æ–∑:",
                key="diagnosis_input",
                placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –¥–∏–∞–≥–Ω–æ–∑",
                help="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –¥–∏–∞–≥–Ω–æ–∑"
            )
            
            icd10_input = st.text_input(
                "–ö–æ–¥ –ú–ö–ë-10 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):",
                key="icd10_input",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: K35.8",
                help="–ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º"
            )
        
        with col2:
            st.subheader("üíä –ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è")
            
            medications = st.text_area(
                "–ú–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–∑–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è:",
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–∞–∂–¥—ã–π –ø—Ä–µ–ø–∞—Ä–∞—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n–¶–µ—Ñ—Ç—Ä–∏–∞–∫—Å–æ–Ω 1–≥ –≤/–≤ 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å\n–ú–µ—Ç—Ä–æ–Ω–∏–¥–∞–∑–æ–ª 500–º–≥ –≤/–≤ 3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å",
                height=100,
                key="medications",
                help="–ü–æ –æ–¥–Ω–æ–º—É –ø—Ä–µ–ø–∞—Ä–∞—Ç—É –Ω–∞ —Å—Ç—Ä–æ–∫—É —Å –¥–æ–∑–∏—Ä–æ–≤–∫–æ–π –∏ —Ä–µ–∂–∏–º–æ–º"
            )
            
            procedures = st.text_area(
                "–ü—Ä–æ—Ü–µ–¥—É—Ä—ã –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏:",
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–∞–∂–¥—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n–ê–ø–ø–µ–Ω–¥—ç–∫—Ç–æ–º–∏—è\n–ò–Ω—Ñ—É–∑–∏–æ–Ω–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è",
                height=100,
                key="procedures",
                help="–ü–æ –æ–¥–Ω–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä–µ –Ω–∞ —Å—Ç—Ä–æ–∫—É"
            )
        
        st.write("---")
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if st.button(
            "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ—Ü–µ–Ω–∫—É", 
            type="primary", 
            use_container_width=True
        ):
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if not diagnosis_input:
                st.error("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∏–∞–≥–Ω–æ–∑!")
            elif not medications and not procedures:
                st.error("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ö–æ—Ç—è –±—ã —á—Ç–æ-—Ç–æ –∏–∑ –ª–µ—á–µ–Ω–∏—è!")
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã
                session.submitted_diagnosis = diagnosis_input
                session.submitted_treatment = {
                    "medications": [m.strip() for m in medications.split('\n') if m.strip()],
                    "procedures": [p.strip() for p in procedures.split('\n') if p.strip()]
                }
                
                # –û—Ü–µ–Ω–∏–≤–∞–µ–º
                with st.spinner("‚è≥ –û—Ü–µ–Ω–∫–∞ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤..."):
                    # –û—Ü–µ–Ω–∫–∞ –¥–∏–∞–≥–Ω–æ–∑–∞
                    diagnosis_eval = services["evaluation_service"].evaluate_diagnosis(
                        submitted=diagnosis_input,
                        correct=case.correct_diagnosis,
                        case=case
                    )
                    
                    # –û—Ü–µ–Ω–∫–∞ –ª–µ—á–µ–Ω–∏—è
                    treatment_eval = services["evaluation_service"].evaluate_treatment(
                        submitted=session.submitted_treatment,
                        correct=case.correct_treatment,
                        case=case
                    )
                    
                    # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ (50% –¥–∏–∞–≥–Ω–æ–∑ + 50% –ª–µ—á–µ–Ω–∏–µ)
                    total_score = (diagnosis_eval["score"] * 0.5) + (treatment_eval["score"] * 0.5)
                    
                    session.evaluation = {
                        "diagnosis": diagnosis_eval,
                        "treatment": treatment_eval,
                        "total_score": round(total_score, 1)
                    }
                
                st.rerun()
